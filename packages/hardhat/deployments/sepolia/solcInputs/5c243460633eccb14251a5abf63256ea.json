{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/SimpleSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n/// @title SimpleSwap Pool for two tokens with liquidity management\r\n/// @author Javier Marcelo Espiñeira\r\n/// @notice Supports swapping between TOKEN_A and TOKEN_B with ERC20 LP token minting\r\ncontract SimpleSwap is ERC20 {\r\n    address public immutable TOKEN_A;\r\n    address public immutable TOKEN_B;\r\n\r\n    uint256 private reserveA;\r\n    uint256 private reserveB;\r\n\r\n    // Structs para evitar stack too deep\r\n    struct LiquidityParams {\r\n        uint256 amountADesired;\r\n        uint256 amountBDesired;\r\n        uint256 amountAMin;\r\n        uint256 amountBMin;\r\n        uint256 reserveA;\r\n        uint256 reserveB;\r\n    }\r\n\r\n    struct RemoveLiquidityParams {\r\n        uint256 liquidity;\r\n        uint256 amountAMin;\r\n        uint256 amountBMin;\r\n        address to;\r\n        uint256 totalSupply;\r\n    }\r\n\r\n    event LiquidityAdded(address indexed provider, address tokenA, address tokenB, uint256 amountA, uint256 amountB, uint256 liquidity);\r\n    event LiquidityRemoved(address indexed provider, address tokenA, address tokenB, uint256 amountA, uint256 amountB, uint256 liquidity);\r\n    event SwapSuccess(address indexed sender, uint256 amountIn, uint256 amountOut, address indexed to);\r\n\r\n    /// @notice Sets the token pair for the liquidity pool\r\n    /// @param tokenA_ Address of token A\r\n    /// @param tokenB_ Address of token B\r\n    constructor(address tokenA_, address tokenB_) ERC20(\"Token L\", \"TKL\") {\r\n        require(tokenA_ != address(0) && tokenB_ != address(0), \"Token addresses cannot be empty\");\r\n        require(tokenA_ != tokenB_, \"Tokens must be different\");\r\n        TOKEN_A = tokenA_;\r\n        TOKEN_B = tokenB_;\r\n    }\r\n\r\n    modifier inTime(uint256 deadline) {\r\n        require(deadline >= block.timestamp, \"Deadline has passed\");\r\n        _;\r\n    }\r\n\r\n    modifier isSupportedPair(address tokenA_, address tokenB_) {\r\n        require(tokenA_ == TOKEN_A && tokenB_ == TOKEN_B, \"Token pair is not supported\");\r\n        _;\r\n    }\r\n\r\n    modifier isValidReceiver(address to) {\r\n        require(to != address(0), \"Receiver address cannot be empty\");\r\n        _;\r\n    }\r\n\r\n    // *** MAIN FUNCTIONS ***\r\n\r\n    /// @notice Adds liquidity to the pool in proportion to the current reserves\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        inTime(deadline)\r\n        isSupportedPair(tokenA, tokenB)\r\n        isValidReceiver(to)\r\n        returns (uint256 amountA, uint256 amountB, uint256 liquidity)\r\n    {\r\n        LiquidityParams memory params = LiquidityParams({\r\n            amountADesired: amountADesired,\r\n            amountBDesired: amountBDesired,\r\n            amountAMin: amountAMin,\r\n            amountBMin: amountBMin,\r\n            reserveA: reserveA,\r\n            reserveB: reserveB\r\n        });\r\n\r\n        return _addLiquidityInternal(params, to);\r\n    }\r\n\r\n    /// @notice Removes liquidity and returns tokens A and B proportionally\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        inTime(deadline)\r\n        isSupportedPair(tokenA, tokenB)\r\n        isValidReceiver(to)\r\n        returns (uint256 amountA, uint256 amountB)\r\n    {\r\n        require(liquidity > 0 && balanceOf(msg.sender) >= liquidity, \"Not enough liquidity to remove\");\r\n\r\n        RemoveLiquidityParams memory params = RemoveLiquidityParams({\r\n            liquidity: liquidity,\r\n            amountAMin: amountAMin,\r\n            amountBMin: amountBMin,\r\n            to: to,\r\n            totalSupply: totalSupply()\r\n        });\r\n\r\n        return _removeLiquidityInternal(params, tokenA, tokenB);\r\n    }\r\n\r\n    /// @notice Swaps exact amount of one token for the other\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n)\r\n    external\r\n    inTime(deadline)\r\n    isValidReceiver(to)\r\n    returns (uint256[] memory amounts)\r\n{\r\n    require(path.length == 2, \"Invalid swap path\");\r\n    require(path[0] != address(0) && path[1] != address(0), \"Pair not supported\");\r\n    require(\r\n        (path[0] == TOKEN_A && path[1] == TOKEN_B) ||\r\n        (path[0] == TOKEN_B && path[1] == TOKEN_A),\r\n        \"Pair not supported\"\r\n    );\r\n\r\n    return _executeSwap(amountIn, amountOutMin, path, to);\r\n}\r\n\r\n    /// @notice Returns token A/B price (scaled to 1e18)\r\n    function getPrice(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        isSupportedPair(tokenA, tokenB)\r\n        returns (uint256 price)\r\n    {\r\n        require(reserveA > 0 && reserveB > 0, \"No liquidity available\");\r\n        price = tokenA == TOKEN_A\r\n            ? (reserveB * 1e18) / reserveA\r\n            : (reserveA * 1e18) / reserveB;\r\n    }\r\n\r\n    /// @notice Returns output amount given input and reserves\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    )\r\n        public\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(amountIn > 0, \"Input amount must be greater than zero\");\r\n        require(reserveIn > 0 && reserveOut > 0, \"Insufficient liquidity for this operation\");\r\n\r\n        return (amountIn * reserveOut) / (amountIn + reserveIn);\r\n    }\r\n\r\n    /// @notice Returns current reserves\r\n    function getReserves() external view returns (uint256, uint256) {\r\n        return (reserveA, reserveB);\r\n    }\r\n\r\n    // *** AUXILIARY FUNCTIONS ***\r\n\r\n    function _addLiquidityInternal(LiquidityParams memory params, address to) \r\n        private \r\n        returns (uint256 amountA, uint256 amountB, uint256 liquidity) \r\n    {\r\n        (amountA, amountB) = _calculateOptimalAmounts(\r\n            params.amountADesired,\r\n            params.amountBDesired,\r\n            params.reserveA,\r\n            params.reserveB,\r\n            params.amountAMin,\r\n            params.amountBMin\r\n        );\r\n\r\n        require(IERC20(TOKEN_A).transferFrom(msg.sender, address(this), amountA), \"Token A transfer failed\");\r\n        require(IERC20(TOKEN_B).transferFrom(msg.sender, address(this), amountB), \"Token B transfer failed\");\r\n\r\n        liquidity = _calculateLiquidity(amountA, amountB, params.reserveA, params.reserveB);\r\n        require(liquidity > 0, \"Insufficient liquidity minted\");\r\n\r\n        _mint(to, liquidity);\r\n        _updateReserves();\r\n\r\n        emit LiquidityAdded(to, TOKEN_A, TOKEN_B, amountA, amountB, liquidity);\r\n    }\r\n\r\n    function _removeLiquidityInternal(\r\n        RemoveLiquidityParams memory params,\r\n        address tokenA,\r\n        address tokenB\r\n    ) private returns (uint256 amountA, uint256 amountB) {\r\n        amountA = (params.liquidity * reserveA) / params.totalSupply;\r\n        amountB = (params.liquidity * reserveB) / params.totalSupply;\r\n\r\n        require(amountA >= params.amountAMin && amountB >= params.amountBMin, \"Minimum output amounts not met\");\r\n\r\n        _executeTokenTransfers(TOKEN_A, TOKEN_B, amountA, amountB, params.to);\r\n        _burn(msg.sender, params.liquidity);\r\n        _updateReserves();\r\n\r\n        emit LiquidityRemoved(params.to, tokenA, tokenB, amountA, amountB, params.liquidity);\r\n    }\r\n\r\n    function _executeSwap(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to\r\n    ) private returns (uint256[] memory amounts) {\r\n        bool isTokenAIn = path[0] == TOKEN_A;\r\n        \r\n        // Calcular output sin variables intermedias\r\n        uint256 amountOut = getAmountOut(\r\n            amountIn, \r\n            isTokenAIn ? reserveA : reserveB,\r\n            isTokenAIn ? reserveB : reserveA\r\n        );\r\n        \r\n        require(amountOut >= amountOutMin, \"Insufficient output amount\");\r\n\r\n        // Ejecutar transferencias\r\n        _executeSwapTransfers(path[0], path[1], amountIn, amountOut, to);\r\n        _updateReserves();\r\n\r\n        amounts = new uint256[](2);\r\n        amounts[0] = amountIn;\r\n        amounts[1] = amountOut;\r\n\r\n        emit SwapSuccess(msg.sender, amountIn, amountOut, to);\r\n    }\r\n\r\n    function _executeSwapTransfers(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint256 amountOut,\r\n        address to\r\n    ) private {\r\n        require(IERC20(tokenIn).transferFrom(msg.sender, address(this), amountIn), \"Input token transfer failed\");\r\n        require(IERC20(tokenOut).transfer(to, amountOut), \"Output token transfer failed\");\r\n    }\r\n\r\n    function _executeTokenTransfers(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        address to\r\n    ) private {\r\n        require(IERC20(tokenA).transfer(to, amountA), \"Token A transfer failed\");\r\n        require(IERC20(tokenB).transfer(to, amountB), \"Token B transfer failed\");\r\n    }\r\n\r\n    function _updateReserves() private {\r\n        reserveA = IERC20(TOKEN_A).balanceOf(address(this));\r\n        reserveB = IERC20(TOKEN_B).balanceOf(address(this));\r\n    }\r\n\r\n    function _calculateOptimalAmounts(\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 reserveA_,\r\n        uint256 reserveB_,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin\r\n    )\r\n    internal\r\n    pure\r\n    returns (uint256 amountA, uint256 amountB)\r\n    {\r\n        if (reserveA_ == 0 && reserveB_ == 0) {\r\n            require(amountADesired >= amountAMin, \"Insufficient amount for token A\");\r\n            require(amountBDesired >= amountBMin, \"Insufficient amount for token B\");\r\n            return (amountADesired, amountBDesired);\r\n        }\r\n\r\n        uint256 amountBOptimal = (amountADesired * reserveB_) / reserveA_;\r\n        if (amountBOptimal <= amountBDesired) {\r\n            require(amountBOptimal >= amountBMin, \"Insufficient amount for token B\");\r\n            return (amountADesired, amountBOptimal);\r\n        } else {\r\n            uint256 amountAOptimal = (amountBDesired * reserveA_) / reserveB_;\r\n            require(amountAOptimal >= amountAMin, \"Insufficient amount for token A\");\r\n            return (amountAOptimal, amountBDesired);\r\n        }\r\n    }\r\n\r\n    function _calculateLiquidity(\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 reserveA_,\r\n        uint256 reserveB_\r\n    )\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (totalSupply() == 0) {\r\n            return _initialLiquidityBase(amountA * amountB);\r\n        }\r\n        uint256 liqA = (amountA * totalSupply()) / reserveA_;\r\n        uint256 liqB = (amountB * totalSupply()) / reserveB_;\r\n        return liqA < liqB ? liqA : liqB;\r\n    }\r\n\r\n    /// @dev Babylonian method for integer square root\r\n    function _initialLiquidityBase(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        } else {\r\n            z = 0;\r\n        }\r\n    }\r\n}"
    },
    "contracts/Token1.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract Token1 is ERC20 {\r\n\r\n    constructor() ERC20(\"Token 1\",\"TK1\") {\r\n        _mint(msg.sender, 1000e18); \r\n    }\r\n\r\n    receive() external payable {\r\n        _mint(msg.sender, msg.value);\r\n    }\r\n\r\n    function mintMe() external {\r\n        _mint(msg.sender, 1000e18);\r\n    }\r\n\r\n    function decimals() public pure override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n}"
    },
    "contracts/Token2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract Token2 is ERC20 {\r\n\r\n    constructor() ERC20(\"Token 2\",\"TK2\") {\r\n        _mint(msg.sender, 1000e18);\r\n    }\r\n\r\n    receive() external payable {\r\n        _mint(msg.sender, msg.value);\r\n    }\r\n\r\n    function mintMe() external {\r\n        _mint(msg.sender, 1000e18);\r\n    }\r\n\r\n    function decimals() public pure override returns (uint8) {\r\n        return 18;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}